diff --git a/src/App.tsx b/src/App.tsx
index 0728518..e756a1a 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean, // Added state to control graph visibility
 }
 
 /**
@@ -15,13 +16,14 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
+  intervalId: NodeJS.Timeout | null = null; // Added to keep track of interval
+
   constructor(props: {}) {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false, // Initialize showGraph to false
     };
   }
 
@@ -29,18 +31,26 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) { // Conditionally render the graph
+      return (<Graph data={this.state.data} />);
+    }
+    return null;
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    if (this.intervalId) {
+      clearInterval(this.intervalId); // Clear existing interval if any
+    }
+    this.intervalId = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ data: [...this.state.data, ...serverResponds] });
+      });
+    }, 100); // Request data every 100ms
   }
 
   /**
@@ -54,12 +64,10 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => {
+              this.setState({ showGraph: true }); // Show the graph when button is clicked
+              this.getDataFromServer();
+            }}>
             Start Streaming Data
           </button>
           <div className="Graph">
@@ -67,7 +75,13 @@ class App extends Component<{}, IState> {
           </div>
         </div>
       </div>
-    )
+    );
+  }
+
+  componentWillUnmount() {
+    if (this.intervalId) {
+      clearInterval(this.intervalId); // Clear interval when component unmounts
+    }
   }
 }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..3d1ca4e 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -45,27 +45,45 @@ class Graph extends Component<IProps, {}> {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
-
       // Add more Perspective configurations here.
       elem.load(this.table);
+
+      // Add Perspective configurations to visualize data.
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', JSON.stringify({
+        stock: 'distinct count',
+        top_ask_price: 'avg',
+        top_bid_price: 'avg',
+        timestamp: 'distinct count'
+      }));
     }
   }
 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      // Handle duplicated data and aggregate
+      const uniqueData = this.props.data.reduce((acc: any[], el: any) => {
+        const existing = acc.find((item: any) => item.stock === el.stock && item.timestamp === el.timestamp);
+        if (existing) {
+          existing.top_ask_price = (existing.top_ask_price + (el.top_ask ? el.top_ask.price : 0)) / 2;
+          existing.top_bid_price = (existing.top_bid_price + (el.top_bid ? el.top_bid.price : 0)) / 2;
+        } else {
+          acc.push({
+            stock: el.stock,
+            top_ask_price: el.top_ask && el.top_ask.price || 0,
+            top_bid_price: el.top_bid && el.top_bid.price || 0,
+            timestamp: el.timestamp,
+          });
+        }
+        return acc;
+      }, []);
+
+      // Update the Perspective table with unique data
+      this.table.update(uniqueData);
     }
   }
 }
